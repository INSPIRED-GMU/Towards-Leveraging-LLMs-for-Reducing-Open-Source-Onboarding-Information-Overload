Contributing to Nest
Welcome!We're thrilled you're considering contributing to Nest. Here's a straightforward guide to help you get started.
Getting Started
If you're unsure where to begin, here are some suggestions:
Check out "complexity: low" issues: Complexity: Low Issues (link)
Help with documentation improvements.
Get involved by merging a Vim patch. (Vim knowledge recommended)

Got a Question or Problem?
For general support questions, Stack Overflow is your best bet: Ask on Stack Overflow (link)(tag your questions with `nestjs`).
You can also chat with us on Discord: Join our Discord (link).
Found a Bug?
If you've found a bug, please report it by creating an issue on our GitHub repository: Submit an Issue (link). If you can, a Pull Request with a bug fix is even better!
Missing a Feature?
Feel free to request a new feature by creating an issue. If you want to implement a new feature, please submit an issue with a proposal first, so we can discuss its relevance and implementation.

Submission Guidelines

Submitting an Issue:
Search the issue tracker first to see if it's already reported.
Provide a detailed description and, if possible, steps to reproduce the issue.

Submitting a Pull Request (PR):
1. Fork the Nest repo (link).
2. Create a new branch for your changes: `git checkout -b my-fix-branch master`.
3. Make your changes, including tests for your code.
4. Commit your changes, adhering to our commit message conventions.
5. Push to your fork and submit a PR to Nest.
Development Setup
You'll need Node.js version 8.9.0 or higher.
1. After forking and cloning the repo, install dependencies:
  
   npm install

2. Prepare your environment:
  
   sh scripts/prepare.sh
 
Commonly Used Scripts

Build packages: `npm run build`
Run tests: `npm run test`
Run integration tests(Docker required): `sh scripts/run-integration.sh`
Lint code: `npm run lint`
Build for production: `npm run build:prod`

Coding Rules
Follow the coding style outlined in Google's JavaScript Style Guide, but keep code lines within 100 characters. Use `npm run format` to format your code.

Commit Message Guidelines

Commit messages should follow a specific format:

<type>(<scope>): <subject>

<body>

<footer>

Type must be one of build, chore, ci, docs, feat, fix, perf, refactor, test, sample.
 Scope can be anything specifying the place of the commit change.
Subject should use the imperative mood: "change" not "changed" nor "changes".
Body should include the motivation for the change and contrast with the previous behavior.
Footer should contain any information about Breaking Changes and issue references.
After Your PR is Merged
Once merged, you can clean up your branches:
git push origin --delete my-fix-branch
git checkout master -f
git branch -D my-fix-branch
git pull --ff upstream master
Need More Help?
If you have any questions or need more detailed instructions, please don't hesitate to ask. We're here to help!
Thanks for contributing to Nest!